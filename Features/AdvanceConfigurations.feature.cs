// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Thermon.CompuTrace.UI.Automation.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class AdvanceConfigurationsFeature : object, Xunit.IClassFixture<AdvanceConfigurationsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "AdvanceConfigurations.feature"
#line hidden
        
        public AdvanceConfigurationsFeature(AdvanceConfigurationsFeature.FixtureData fixtureData, Thermon_CompuTrace_UI_Automation_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "AdvanceConfigurations", "Advance Configuration Validations", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Templates For Custom BoM Entries")]
        [Xunit.TraitAttribute("FeatureTitle", "AdvanceConfigurations")]
        [Xunit.TraitAttribute("Description", "Templates For Custom BoM Entries")]
        [Xunit.TraitAttribute("Category", "Test1,")]
        [Xunit.TraitAttribute("Category", "SmokeTest,")]
        [Xunit.TraitAttribute("Category", "RegressionTest")]
        public void TemplatesForCustomBoMEntries()
        {
            string[] tagsOfScenario = new string[] {
                    "Test1,",
                    "SmokeTest,",
                    "RegressionTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Templates For Custom BoM Entries", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 6
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 testRunner.Given("I click Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 8
 testRunner.When("I click on Create Project", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 9
 testRunner.And("I enter project name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And("I enter project number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 11
 testRunner.And("I click on location column", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 12
 testRunner.And("I click on Next button on Project Reference page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table1.AddRow(new string[] {
                            "Pipe Units",
                            "Imperial Pipe / Imperial Insulation"});
                table1.AddRow(new string[] {
                            "Temperature Units",
                            "F"});
                table1.AddRow(new string[] {
                            "Other Units",
                            "Imperial"});
                table1.AddRow(new string[] {
                            "Electrical Codes",
                            "ATEX: Ordinary/Zones"});
#line 13
 testRunner.And("I select default project units", ((string)(null)), table1, "And ");
#line hidden
#line 19
 testRunner.And("I click on Next button on Set Project Units page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("I click on Next button on Design Defaults page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 21
 testRunner.And("I click on Advance Configuration checkbox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.And("I click on Next button on Advance Configuration page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "catalog number",
                            "part number"});
                table2.AddRow(new string[] {
                            "dsx-3-1",
                            "25615"});
                table2.AddRow(new string[] {
                            "dsb-6-1",
                            "34355"});
#line 23
 testRunner.And("I Add new items on Templates For Custom BoM Entries page", ((string)(null)), table2, "And ");
#line hidden
#line 27
 testRunner.Then("I should be able to see item added on Templates For Custom BoM Entries page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Project Level Miscellaneous Defaults")]
        [Xunit.TraitAttribute("FeatureTitle", "AdvanceConfigurations")]
        [Xunit.TraitAttribute("Description", "Project Level Miscellaneous Defaults")]
        [Xunit.TraitAttribute("Category", "Test2,")]
        [Xunit.TraitAttribute("Category", "SmokeTest,")]
        [Xunit.TraitAttribute("Category", "RegressionTest")]
        public void ProjectLevelMiscellaneousDefaults()
        {
            string[] tagsOfScenario = new string[] {
                    "Test2,",
                    "SmokeTest,",
                    "RegressionTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Project Level Miscellaneous Defaults", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 34
 testRunner.Given("I click Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
 testRunner.When("I click on Create Project", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
 testRunner.And("I enter project name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 37
 testRunner.And("I enter project number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And("I click on location column", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("I click on Next button on Project Reference page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table3.AddRow(new string[] {
                            "Pipe Units",
                            "Imperial Pipe / Imperial Insulation"});
                table3.AddRow(new string[] {
                            "Temperature Units",
                            "F"});
                table3.AddRow(new string[] {
                            "Other Units",
                            "Imperial"});
                table3.AddRow(new string[] {
                            "Electrical Codes",
                            "ATEX: Ordinary/Zones"});
#line 40
 testRunner.And("I select default project units", ((string)(null)), table3, "And ");
#line hidden
#line 46
 testRunner.And("I click on Next button on Set Project Units page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.And("I click on Next button on Design Defaults page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.And("I click on Advance Configuration checkbox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 49
 testRunner.And("I click on Next button on Advance Configuration page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 50
 testRunner.And("I click on Next button on Templates For Custom BoM Entries page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table4.AddRow(new string[] {
                            "Controller Type",
                            "Mechanical Thermostat"});
#line 51
 testRunner.And("I select Controller Type", ((string)(null)), table4, "And ");
#line hidden
#line 54
 testRunner.Then("I should be able to see selected controller type", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Project Level Custom Components")]
        [Xunit.TraitAttribute("FeatureTitle", "AdvanceConfigurations")]
        [Xunit.TraitAttribute("Description", "Project Level Custom Components")]
        [Xunit.TraitAttribute("Category", "Test3,")]
        [Xunit.TraitAttribute("Category", "SmokeTest,")]
        [Xunit.TraitAttribute("Category", "RegressionTest")]
        public void ProjectLevelCustomComponents()
        {
            string[] tagsOfScenario = new string[] {
                    "Test3,",
                    "SmokeTest,",
                    "RegressionTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Project Level Custom Components", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 60
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 61
 testRunner.Given("I click Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 62
 testRunner.When("I click on Create Project", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 63
 testRunner.And("I enter project name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And("I enter project number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.And("I click on location column", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
 testRunner.And("I click on Next button on Project Reference page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table5.AddRow(new string[] {
                            "Pipe Units",
                            "Imperial Pipe / Imperial Insulation"});
                table5.AddRow(new string[] {
                            "Temperature Units",
                            "F"});
                table5.AddRow(new string[] {
                            "Other Units",
                            "Imperial"});
                table5.AddRow(new string[] {
                            "Electrical Codes",
                            "ATEX: Ordinary/Zones"});
#line 67
 testRunner.And("I select default project units", ((string)(null)), table5, "And ");
#line hidden
#line 73
 testRunner.And("I click on Next button on Set Project Units page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And("I click on Next button on Design Defaults page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 75
 testRunner.And("I click on Advance Configuration checkbox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 76
 testRunner.And("I click on Next button on Advance Configuration page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.And("I click on Next button on Templates For Custom BoM Entries page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And("I click on Next button on  Project Level Miscellaneous Defaults page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "catalog number",
                            "part number",
                            "component type"});
                table6.AddRow(new string[] {
                            "dsx-3-1",
                            "25615",
                            "PowerConnection"});
                table6.AddRow(new string[] {
                            "dsb-6-1",
                            "34355",
                            "PowerConnection"});
#line 79
 testRunner.And("I Add new items on Templates For project level custom components", ((string)(null)), table6, "And ");
#line hidden
#line 83
 testRunner.Then("I should be able to see item added on Project Level Custom Components Page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Project Extra Requirements")]
        [Xunit.TraitAttribute("FeatureTitle", "AdvanceConfigurations")]
        [Xunit.TraitAttribute("Description", "Project Extra Requirements")]
        [Xunit.TraitAttribute("Category", "Test4,")]
        [Xunit.TraitAttribute("Category", "SmokeTest,")]
        [Xunit.TraitAttribute("Category", "RegressionTest")]
        public void ProjectExtraRequirements()
        {
            string[] tagsOfScenario = new string[] {
                    "Test4,",
                    "SmokeTest,",
                    "RegressionTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Project Extra Requirements", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 89
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 90
 testRunner.Given("I click Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 91
 testRunner.When("I click on Create Project", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 92
 testRunner.And("I enter project name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 93
 testRunner.And("I enter project number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 94
 testRunner.And("I click on location column", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 95
 testRunner.And("I click on Next button on Project Reference page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table7.AddRow(new string[] {
                            "Pipe Units",
                            "Imperial Pipe / Imperial Insulation"});
                table7.AddRow(new string[] {
                            "Temperature Units",
                            "F"});
                table7.AddRow(new string[] {
                            "Other Units",
                            "Imperial"});
                table7.AddRow(new string[] {
                            "Electrical Codes",
                            "ATEX: Ordinary/Zones"});
#line 96
 testRunner.And("I select default project units", ((string)(null)), table7, "And ");
#line hidden
#line 102
 testRunner.And("I click on Next button on Set Project Units page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.And("I click on Next button on Design Defaults page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 104
 testRunner.And("I click on Advance Configuration checkbox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
 testRunner.And("I click on Next button on Advance Configuration page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
 testRunner.And("I click on Next button on Templates For Custom BoM Entries page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 107
 testRunner.And("I click on Next button on  Project Level Miscellaneous Defaults page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 108
 testRunner.And("I click on Next button on Project Level Custom Components page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "component type",
                            "catalog number"});
                table8.AddRow(new string[] {
                            "Banding",
                            "1952A"});
#line 109
 testRunner.And("I select component type on Project Extra Components page", ((string)(null)), table8, "And ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "Catalog Part"});
                table9.AddRow(new string[] {
                            "1952A"});
                table9.AddRow(new string[] {
                            "B-10"});
#line 112
 testRunner.And("I select Catalog Part from dropdown on Project Extra Components page", ((string)(null)), table9, "And ");
#line hidden
#line 116
 testRunner.Then("I should be able to see component type and catalog part added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Project Available Components")]
        [Xunit.TraitAttribute("FeatureTitle", "AdvanceConfigurations")]
        [Xunit.TraitAttribute("Description", "Project Available Components")]
        [Xunit.TraitAttribute("Category", "Test5,")]
        [Xunit.TraitAttribute("Category", "SmokeTest,")]
        [Xunit.TraitAttribute("Category", "RegressionTest")]
        public void ProjectAvailableComponents()
        {
            string[] tagsOfScenario = new string[] {
                    "Test5,",
                    "SmokeTest,",
                    "RegressionTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Project Available Components", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 124
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 125
 testRunner.Given("I click Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 126
 testRunner.When("I click on Create Project", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 127
 testRunner.And("I enter project name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 128
 testRunner.And("I enter project number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 129
 testRunner.And("I click on location column", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 130
 testRunner.And("I click on Next button on Project Reference page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table10.AddRow(new string[] {
                            "Pipe Units",
                            "Imperial Pipe / Imperial Insulation"});
                table10.AddRow(new string[] {
                            "Temperature Units",
                            "F"});
                table10.AddRow(new string[] {
                            "Other Units",
                            "Imperial"});
                table10.AddRow(new string[] {
                            "Electrical Codes",
                            "ATEX: Ordinary/Zones"});
#line 131
 testRunner.And("I select default project units", ((string)(null)), table10, "And ");
#line hidden
#line 137
 testRunner.And("I click on Next button on Set Project Units page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 138
 testRunner.And("I click on Next button on Design Defaults page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 139
 testRunner.And("I click on Advance Configuration checkbox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 140
 testRunner.And("I click on Next button on Advance Configuration page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 141
 testRunner.And("I click on Next button on Templates For Custom BoM Entries page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 142
 testRunner.And("I click on Next button on  Project Level Miscellaneous Defaults page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 143
 testRunner.And("I click on Next button on Project Level Custom Components page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 144
 testRunner.And("I click on Next button on Project Extra Requirements page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 145
 testRunner.And("I select component type from lists to add to available components", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 146
 testRunner.Then("I should be able to see component type added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Project Tag Defaults")]
        [Xunit.TraitAttribute("FeatureTitle", "AdvanceConfigurations")]
        [Xunit.TraitAttribute("Description", "Project Tag Defaults")]
        [Xunit.TraitAttribute("Category", "Test6,")]
        [Xunit.TraitAttribute("Category", "SmokeTest,")]
        [Xunit.TraitAttribute("Category", "RegressionTest")]
        public void ProjectTagDefaults()
        {
            string[] tagsOfScenario = new string[] {
                    "Test6,",
                    "SmokeTest,",
                    "RegressionTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Project Tag Defaults", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 156
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 157
 testRunner.Given("I click Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 158
 testRunner.When("I click on Create Project", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 159
 testRunner.And("I enter project name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 160
 testRunner.And("I enter project number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 161
 testRunner.And("I click on location column", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 162
 testRunner.And("I click on Next button on Project Reference page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table11.AddRow(new string[] {
                            "Pipe Units",
                            "Imperial Pipe / Imperial Insulation"});
                table11.AddRow(new string[] {
                            "Temperature Units",
                            "F"});
                table11.AddRow(new string[] {
                            "Other Units",
                            "Imperial"});
                table11.AddRow(new string[] {
                            "Electrical Codes",
                            "ATEX: Ordinary/Zones"});
#line 163
 testRunner.And("I select default project units", ((string)(null)), table11, "And ");
#line hidden
#line 169
 testRunner.And("I click on Next button on Set Project Units page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
 testRunner.And("I click on Next button on Design Defaults page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
 testRunner.And("I click on Advance Configuration checkbox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 172
 testRunner.And("I click on Next button on Advance Configuration page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
 testRunner.And("I click on Next button on Templates For Custom BoM Entries page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
 testRunner.And("I click on Next button on  Project Level Miscellaneous Defaults page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 175
 testRunner.And("I click on Next button on Project Level Custom Components page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 176
 testRunner.And("I click on Next button on Project Extra Requirements page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 177
 testRunner.And("I click on Next button on Project Available Components page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 178
 testRunner.And("I click use default button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 179
 testRunner.Then("I should be able to see Project Tag Defaults added", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Circuit Reference Drawing List")]
        [Xunit.TraitAttribute("FeatureTitle", "AdvanceConfigurations")]
        [Xunit.TraitAttribute("Description", "Circuit Reference Drawing List")]
        [Xunit.TraitAttribute("Category", "Test7,")]
        [Xunit.TraitAttribute("Category", "SmokeTest,")]
        [Xunit.TraitAttribute("Category", "RegressionTest")]
        public void CircuitReferenceDrawingList()
        {
            string[] tagsOfScenario = new string[] {
                    "Test7,",
                    "SmokeTest,",
                    "RegressionTest"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Circuit Reference Drawing List", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 185
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 186
 testRunner.Given("I click Dashboard button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 187
 testRunner.When("I click on Create Project", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 188
 testRunner.And("I enter project name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 189
 testRunner.And("I enter project number", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 190
 testRunner.And("I click on location column", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 191
 testRunner.And("I click on Next button on Project Reference page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Key",
                            "Value"});
                table12.AddRow(new string[] {
                            "Pipe Units",
                            "Imperial Pipe / Imperial Insulation"});
                table12.AddRow(new string[] {
                            "Temperature Units",
                            "F"});
                table12.AddRow(new string[] {
                            "Other Units",
                            "Imperial"});
                table12.AddRow(new string[] {
                            "Electrical Codes",
                            "ATEX: Ordinary/Zones"});
#line 192
 testRunner.And("I select default project units", ((string)(null)), table12, "And ");
#line hidden
#line 198
 testRunner.And("I click on Next button on Set Project Units page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 199
 testRunner.And("I click on Next button on Design Defaults page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 200
 testRunner.And("I click on Advance Configuration checkbox", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 201
 testRunner.And("I click on Next button on Advance Configuration page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 202
 testRunner.And("I click on Next button on Templates For Custom BoM Entries page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 203
 testRunner.And("I click on Next button on  Project Level Miscellaneous Defaults page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 204
 testRunner.And("I click on Next button on Project Level Custom Components page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 205
 testRunner.And("I click on Next button on Project Extra Requirements page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 206
 testRunner.And("I click on Next button on Project Available Components page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 207
 testRunner.And("I click on Next button on Project Tag Defaults page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 208
 testRunner.And("I click Import Circuit Reference Drawing Type button", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 209
 testRunner.Then("I should be able to see Circuit Reference Drawing List", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                AdvanceConfigurationsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                AdvanceConfigurationsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
